/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parkeasy;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Atiq
 */
public class Notification extends javax.swing.JPanel {

    /**
     * Creates new form Notification
     */
    
    
    private static Connection connection = null;
    int user_id;
    String park_name="";
    String user_name;
    String message;
    public Notification() {
        initComponents();
    }
    
        public Notification(int u_id,String u_name) {
        initComponents();
        user_id=u_id;
        user_name=u_name;
        connection = DbConnect.dbconnect();
        showDetailTextArea.setText("");
        parkName();
        //showBookingNotification();
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        bookedTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        showDetailTextArea = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        btnSave = new javax.swing.JPanel();
        fontSave = new javax.swing.JLabel();
        btnCancel = new javax.swing.JPanel();
        fontCancel = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(710, 470));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(710, 470));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 0));
        jLabel1.setText("Booking Notifications");

        bookedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        bookedTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookedTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(bookedTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        showDetailTextArea.setColumns(20);
        showDetailTextArea.setLineWrap(true);
        showDetailTextArea.setRows(5);
        showDetailTextArea.setTabSize(10);
        showDetailTextArea.setText("Notification details wii be shown here...");
        showDetailTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(showDetailTextArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        btnSave.setBackground(new java.awt.Color(255, 255, 255));
        btnSave.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.setPreferredSize(new java.awt.Dimension(150, 24));
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveMouseExited(evt);
            }
        });

        fontSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fontSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/parkeasy/icons/icons8_Save_20px.png"))); // NOI18N
        fontSave.setText("Park Vehicle");
        fontSave.setIconTextGap(8);

        javax.swing.GroupLayout btnSaveLayout = new javax.swing.GroupLayout(btnSave);
        btnSave.setLayout(btnSaveLayout);
        btnSaveLayout.setHorizontalGroup(
            btnSaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnSaveLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fontSave, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addContainerGap())
        );
        btnSaveLayout.setVerticalGroup(
            btnSaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fontSave, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        btnCancel.setBackground(new java.awt.Color(255, 255, 255));
        btnCancel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.setPreferredSize(new java.awt.Dimension(150, 24));
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCancelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCancelMouseExited(evt);
            }
        });

        fontCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fontCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/parkeasy/icons/icons8_Erase_20px.png"))); // NOI18N
        fontCancel.setText("Cancel Book ");
        fontCancel.setIconTextGap(8);

        javax.swing.GroupLayout btnCancelLayout = new javax.swing.GroupLayout(btnCancel);
        btnCancel.setLayout(btnCancelLayout);
        btnCancelLayout.setHorizontalGroup(
            btnCancelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnCancelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fontCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btnCancelLayout.setVerticalGroup(
            btnCancelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fontCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        // TODO add your handling code here:
        setclickedcolor(btnSave, fontSave);
        int search_id=0;
        
        SimpleDateFormat  timeFormater=new SimpleDateFormat("HH:mm:ss");
        SimpleDateFormat  dateFormater=new SimpleDateFormat("dd/MM/yyyy");
        Date date = new Date();
        String time= timeFormater.format(date);
        String new_date= dateFormater.format(date);
        
         NewEntryFromBooking newEntryFromBooking = new NewEntryFromBooking();
        newEntryFromBooking.parkedTableName=user_name+"_parked_status";
        newEntryFromBooking.u_name=user_name;
        
        int row = bookedTable.getSelectedRow();

        if (row >= 0) {
            String tableClicked = (bookedTable.getModel().getValueAt(row, 0).toString());
            String vehicleNo = (bookedTable.getModel().getValueAt(row, 1).toString());
            
            
            try {
                String sql = "select * from users where user_name='" + tableClicked + "'";
            PreparedStatement st = connection.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {                
                    search_id = rs.getInt("id");
            } 
            }
            catch (Exception e) {
                e.printStackTrace();
            }
            
            
            try {

                        String sql_1 = "select * from " +user_name+ "_sensor_status where date='" + new_date + "'";
                        PreparedStatement st1 = connection.prepareStatement(sql_1);
                        ResultSet rs_1 = st1.executeQuery();

                        if (rs_1.next()) {

                             if(rs_1.getInt("p1")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-A Park-1");
                             }else if(rs_1.getInt("p2")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-A Park-2");
                             }else if(rs_1.getInt("p3")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-A Park-3");
                             }else if(rs_1.getInt("p4")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-A Park-4");
                             }else if(rs_1.getInt("p5")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-B Park-1");
                             }else if(rs_1.getInt("p6")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-B Park-2");
                             }else if(rs_1.getInt("p7")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-B Park-3");
                             }else if(rs_1.getInt("p8")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-B Park-4");
                             }else if(rs_1.getInt("p9")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-C Park-1");
                             }else if(rs_1.getInt("p10")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-C Park-2");
                             }else if(rs_1.getInt("p11")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-C Park-3");
                             }else if(rs_1.getInt("p12")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-C Park-4");
                             }else if(rs_1.getInt("p13")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-D Park-1");
                             }else if(rs_1.getInt("p14")==0)
                             {
                                 newEntryFromBooking.positionTF.setText("Block-D Park-2");
                             }else 
                             {
                                 newEntryFromBooking.positionTF.setText("No park is available");
                             }
                             
                        }
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, e);

                    }
            
            
            
            
                try {
                String sql = "select * from park_owner where user_id='" + user_id + "' ";
                PreparedStatement st = connection.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                if (rs.next()) {
                    newEntryFromBooking.titleLabel.setText(rs.getString("park_name"));
                    newEntryFromBooking.feeTF.setText(rs.getString("rate"));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }      
            
            try {
                String sql2 = "select * from customer where user_id='" + search_id + "'";
                        PreparedStatement st2 = connection.prepareStatement(sql2);
                        ResultSet rs2 = st2.executeQuery();

                        if (rs2.next()) {

                            newEntryFromBooking.nameTF.setText(rs2.getString("name"));
                            newEntryFromBooking.phoneTF.setText(rs2.getString("phone"));
                            newEntryFromBooking.emailTF.setText(rs2.getString("email"));
                            newEntryFromBooking.addressTA.setText(rs2.getString("address"));
                            newEntryFromBooking.vehicalNoTf.setText(vehicleNo);
                            newEntryFromBooking.entryTimeTF.setText(time);
                            newEntryFromBooking.userNameTF.setText(tableClicked);
                            newEntryFromBooking.paymentTypeTF.setText(rs2.getString("payment"));
                            st2.close();
                            rs2.close();
                        }
            } catch (Exception e) {
                e.printStackTrace();
            }
            newEntryFromBooking.setVisible(true);
        
        }else {
            JOptionPane.showMessageDialog(null, "Please select a row .");}
        
        
    }//GEN-LAST:event_btnSaveMouseClicked

    private void btnSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseEntered

        // TODO add your handling code here:
        setselectcolor(btnSave, fontSave);
    }//GEN-LAST:event_btnSaveMouseEntered

    private void btnSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseExited
        // TODO add your handling code here:
        resetselectcolor(btnSave, fontSave);
    }//GEN-LAST:event_btnSaveMouseExited

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        // TODO add your handling code here:
        setclickedcolor(btnCancel, fontCancel);
        
        int row = bookedTable.getSelectedRow();

        if (row >= 0) {
            String tableClicked = (bookedTable.getModel().getValueAt(row, 0).toString());
            String vehicleNo = (bookedTable.getModel().getValueAt(row, 1).toString());
            
            
             try {
                  String sql = "update book_notification set approval_status ='not_approved',status='0' "
                            + " where vehicle_no='"+vehicleNo+"'AND user_name='"+tableClicked+"'AND park_name="
                          + "'"+park_name+"' ";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    statement.executeUpdate();

                    statement.close();
                    showBookingNotification();
                    //JOptionPane.showMessageDialog(this, "Book cancel Successful");
                    showDetailTextArea.setText("");
                    
            } catch (Exception e) {
                e.printStackTrace();
            }
             
        }else {
            JOptionPane.showMessageDialog(null, "Please select a row .");}
        
    }//GEN-LAST:event_btnCancelMouseClicked

    private void btnCancelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseEntered
        // TODO add your handling code here:
        setselectcolor(btnCancel, fontCancel);
    }//GEN-LAST:event_btnCancelMouseEntered

    private void btnCancelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseExited
        // TODO add your handling code here:
        resetselectcolor(btnCancel, fontCancel);
    }//GEN-LAST:event_btnCancelMouseExited

    
    public  void parkName(){
        try {
                String sql = "select * from park_owner where user_id='" + user_id + "' ";
                PreparedStatement st = connection.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                if (rs.next()) {
                    park_name=rs.getString("park_name");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }      
    }
    
    
    
    private void bookedTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookedTableMouseClicked
        // TODO add your handling code here:
         String time="";
        String message="";
       
        
        int row = bookedTable.getSelectedRow();
        if (row >= 0) {
            String tableClicked = (bookedTable.getModel().getValueAt(row, 1).toString());
            
            
            try {
                String sql = "select * from book_notification where vehicle_no='"
                        +""+ tableClicked + "' AND status='" + 1 + "' AND park_name='" + park_name + "'";
                        
                PreparedStatement st = connection.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                if(rs.next()){
                    time=rs.getString("time");
                    message="User name: "+rs.getString("user_name")
                            +"\tVehicle No: "+rs.getString("vehicle_no")
                            +"\tVehicle Type: "+rs.getString("vehicle_type")
                            +"\tBooking Time: "+rs.getString("time")
                            +"\tBooking Date: "+rs.getString("date")
                            +"\nRemaining Time: ";
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            showDetailTextArea.setText(message);
            
            double bookedTime=0;

        SimpleDateFormat daeformatFormat = new SimpleDateFormat("HH:mm:ss");
        Date date = new Date();
        String currentTime = daeformatFormat.format(date);
        String hour = String.valueOf(currentTime.charAt(0)) + String.valueOf(currentTime.charAt(1));
        String min = String.valueOf(currentTime.charAt(3)) + String.valueOf(currentTime.charAt(4));
        String sec = String.valueOf(currentTime.charAt(6)) + String.valueOf(currentTime.charAt(7));
        double currentTimeinSec = Long.parseLong(hour) * 60 * 60 + (Long.parseLong(min) * 60) + (Long.parseLong(sec));

        String hour2 = String.valueOf(time.charAt(0)) + String.valueOf(time.charAt(1));
            String min2 = String.valueOf(time.charAt(3)) + String.valueOf(time.charAt(4));
            String sec2 = String.valueOf(time.charAt(6)) + String.valueOf(time.charAt(7));
             bookedTime = Long.parseLong(hour2) * 60 * 60 + (Long.parseLong(min2) * 60) + (Long.parseLong(sec2));
            float remainingTime = (float) ((bookedTime+660-currentTimeinSec) / 60);    
            message=message+String.format("%.2f", remainingTime)+" Minute";
            
            showDetailTextArea.setText(message);
            
            try {
                  String sql = "update book_notification set notification_type ='' "
                            + " where notification_type='New'AND vehicle_no='"+tableClicked+"'AND park_name="
                          + "'"+park_name+"' ";
                    PreparedStatement statement = connection.prepareStatement(sql);
                    statement.executeUpdate();

                    statement.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_bookedTableMouseClicked

    
    
    
    public void showBookingNotification(){
         SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date date = new Date();
        String currentDate = dateFormat.format(date);
        
        try {
            String sql_1 = "select user_name,vehicle_no,approval_status,date,notification_type "
                    + "from book_notification"
                           + " where date='" + currentDate + "'AND park_name='" + park_name + "'AND "
                    + "(approval_status= 'pending' OR  approval_status= 'approved'OR  approval_status= 'booking_confirm')";
             
            PreparedStatement st = connection.prepareStatement(sql_1);
            ResultSet rs_1 = st.executeQuery();
            bookedTable.setModel(DbUtils.resultSetToTableModel(rs_1));
            //bookedTable.setSelectionBackground(Color.red);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
  
    
      void setselectcolor(JPanel panel, JLabel label) {
        panel.setBackground(new Color(255, 250, 250));
        label.setForeground(new Color(31, 58, 147));
    }

    void setclickedcolor(JPanel panel, JLabel label) {
        panel.setBackground(new Color(31, 58, 147));
        label.setForeground(Color.white);
    }

    void resetselectcolor(JPanel panel, JLabel label) {
        panel.setBackground(Color.WHITE);
        label.setForeground(Color.BLACK);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookedTable;
    private javax.swing.JPanel btnCancel;
    private javax.swing.JPanel btnSave;
    private javax.swing.JLabel fontCancel;
    private javax.swing.JLabel fontSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JTextArea showDetailTextArea;
    // End of variables declaration//GEN-END:variables
}
